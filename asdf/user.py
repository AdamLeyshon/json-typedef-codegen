# Code generated by jtd-codegen 0.1.6. DO NOT EDIT.

from dataclasses import dataclass
from enum import Enum
from typing import Dict, List, Optional

class _JsonWrapper:
    pass

def _from_json(cls, data):
    if cls == str or cls == int or cls == float or cls == bool:
        return data

    if get_origin(cls) == Union:
        return _from_json(get_args(cls)[0], data)

    if get_origin(cls) == list:
        return [_from_json(get_args(cls)[0], val) for val in data]

    if get_origin(cls) == dict:
        return { key: _from_json(get_args(cls)[1], val) for key, val in data.items() }

    if issubclass(cls, _JsonWrapper):
        return cls(_from_json(cls.value_cls, data))

@dataclass
class Location:
    """
    A latitude / longitude pair indicating a position on Earth
    """


    lat: str


    lng: str


    @classmethod
    def from_json(cls, data) -> Location:


    def to_json(self):
        pass

@dataclass
class Name(_JsonWrapper):
    """
    A proper name.
    
    Note that this is a string, and not some object with first/given name or a
    last/family name. We have users across many cultures, and some of these
    cultures use mononyms or otherwise don't map onto these concepts.
    """

    value_cls: ClassVar[type] = str
    value: str


    @classmethod
    def from_json(cls, data) -> Name:

        return cls(_from_json(str, data))


    def to_json(self):
        pass

@dataclass
class User:
    """
    A user represents a person in our system.
    """


    first_known_location: Optional[Location]
    """
    The first known location of this user
    """

    id: str


    labels: Dict[str, str]


    last_known_location: Optional[Location]
    """
    The last known location of this user
    """

    name: Name


    preferences: UserPreferences


    @classmethod
    def from_json(cls, data) -> User:


    def to_json(self):
        pass

@dataclass
class UserPreferences:
    """
    Some preferences the user has indicated to us.
    """


    do_not_track: UserPreferencesDoNotTrack


    title: Optional[UserPreferencesTitle]
    """
    A title we should use when addressing the user formally.
    """

    @classmethod
    def from_json(cls, data) -> UserPreferences:


    def to_json(self):
        pass

@dataclass
class UserPreferencesDoNotTrack:
    """
    User preferences around do-not-track
    """


    @classmethod
    def from_json(cls, data) -> UserPreferencesDoNotTrack:


    def to_json(self):
        pass

@dataclass
class UserPreferencesDoNotTrackV0:
    """
    Our pre-GDPR do-not-track settings
    """


    do_not_track: bool


    @classmethod
    def from_json(cls, data) -> UserPreferencesDoNotTrackV0:


    def to_json(self):
        pass

@dataclass
class UserPreferencesDoNotTrackV1:
    """
    Our post-GDPR do-not-track settings
    """


    do_not_track: UserPreferencesDoNotTrackV1DoNotTrack


    opt_out_channels: List[str]


    @classmethod
    def from_json(cls, data) -> UserPreferencesDoNotTrackV1:


    def to_json(self):
        pass

class UserPreferencesDoNotTrackV1DoNotTrack(Enum):
    ALL = "ALL"
    ESSENTIAL_ONLY = "ESSENTIAL_ONLY"
    NONE = "NONE"

class UserPreferencesTitle(Enum):
    HRH = "HRH"
    MR = "MR"
    MRS = "MRS"
    MS = "MS"
    REV = "REV"

