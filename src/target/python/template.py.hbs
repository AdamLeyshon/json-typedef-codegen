# Code generated by jtd-codegen {{ version }}. DO NOT EDIT.
{{#each imports}}
from {{ @key }} import {{#each this}}{{ this }}{{#unless @last}}, {{/unless}}{{/each}}
{{~/each}}

class _JsonWrapper:
    pass

def _from_json(cls, data):
    if cls == str or cls == int or cls == float or cls == bool:
        return data

    if get_origin(cls) == Union:
        return _from_json(get_args(cls)[0], data)

    if get_origin(cls) == list:
        return [_from_json(get_args(cls)[0], val) for val in data]

    if get_origin(cls) == dict:
        return { key: _from_json(get_args(cls)[1], val) for key, val in data.items() }

    if issubclass(cls, _JsonWrapper):
        return cls(_from_json(cls.value_cls, data))

    return cls.from_json(data)

def _to_json(cls, data):
    if cls == str or cls == int or cls == float or cls == bool:
        return data

    if get_origin(cls) == Union:
        return _to_json(get_args(cls)[0], data)

    if get_origin(cls) == list:
        return [_to_json(get_args(cls)[0], val) for val in data]

    if get_origin(cls) == dict:
        return { key: _to_json(get_args(cls)[1], val) for key, val in data.items() }

    if issubclass(cls, _JsonWrapper):
        return _to_json(cls.value_cls, data.value)

    return cls.to_json(data)

{{#each classes}}
{{#if Dataclass}}
@dataclass
class {{ @key }}{{#if Dataclass.primitive_wrapper_for }}(_JsonWrapper){{/if}}:
{{ comment 80 "    \"\"\"" "    " "    \"\"\"" Dataclass.description }}
{{#if Dataclass.primitive_wrapper_for }}
    value_cls: ClassVar[type] = {{ Dataclass.primitive_wrapper_for }}
    value: {{ Dataclass.primitive_wrapper_for }}
{{/if}}
{{#each fields}}
    {{ @key }}: {{ type_ }}
{{ comment 80 "    \"\"\"" "    " "    \"\"\"" description }}
{{/each}}
    @classmethod
    def from_json(cls, data) -> '{{ @key }}':
{{#if primitive_wrapper_for }}
        return _from_json(cls, data)
{{/if}}

    def to_json(self):
{{#if primitive_wrapper_for }}
        return _to_json(type(self), self)
{{/if}}
{{/if}}
{{/each}}

{{!-- {{#each classes}}

{{/each}}
{{~#each enums}}
class {{ @key }}(Enum):
{{~#each members}}
    {{ @key }} = {{ value }}
{{~/each}}
    @classmethod
    def from_json(cls, data) -> '{{ @key }}':
        return cls(data)

    def to_json(self):
        return self.value
{{/each}} --}}
