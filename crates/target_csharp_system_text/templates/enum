namespace {{ namespace }}
{
{{ metadata|description(1) }}
    [JsonConverter(typeof({{ name }}JsonConverter))]
    public enum {{ name }}
    {
{% for member in members %}
{{ metadata|enum_variant_description(2, member.json_value) }}
        {{ member.name }},
{% endfor %}
    }

    public class {{ name }}JsonConverter : JsonConverter<{{ name }}>
    {
        public override {{ name }} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
{% for member in members %}
                case {{ "{:?}"|format(member.json_value )}}:
                    return {{ name }}.{{ member.name }};
{% endfor %}
                default:
                    throw new ArgumentException(String.Format("Bad {{ name }} value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, {{ name }} value, JsonSerializerOptions options)
        {
            switch (value)
            {
{% for member in members %}
                case {{ name }}.{{ member.name }}:
                    JsonSerializer.Serialize<string>(writer, {{ "{:?}"|format(member.json_value) }}, options);
                    return;
{% endfor %}
            }
        }
    }
}
