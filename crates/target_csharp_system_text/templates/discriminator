namespace {{ namespace }}
{
{{discriminator.metadata|description(1) }}
    [JsonConverter(typeof({{ discriminator.name }}JsonConverter))]
    public abstract class {{ discriminator.name }}
    {
    }

    public class {{ discriminator.name }}JsonConverter : JsonConverter<{{ discriminator.name }}>
    {
        public override {{ discriminator.name }} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty({{ "{:?}"|format(discriminator.tag_json_name) }}).GetString();

            switch (tagValue)
            {
{%- for (tag_value, variant) in discriminator.variants %}
                case {{ "{:?}"|format(tag_value) }}:
                    return JsonSerializer.Deserialize<{{ variant }}>(ref readerCopy, options);
{%- endfor %}
                default:
                    throw new ArgumentException(String.Format("Bad {{ discriminator.tag_name }} value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, {{ discriminator.name }} value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
